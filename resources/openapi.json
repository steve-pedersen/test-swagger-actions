{
  "openapi": "3.0.1",
  "info": {
    "title": "study-proc-api",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/platform": {},
    "/platform/version": {
      "get": {
        "description": "get GIT's sha1",
        "operationId": "Get version",
        "parameters": [
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Healthcheck/version information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      }
    },
    "/platform/tenants/{tenantId}/studies": {
      "get": {
        "description": "Retrieves all studies for the specified Tenant.",
        "operationId": "Retrieve Studies",
        "parameters": [
          {
            "name": "filter[protocolNumber]",
            "in": "query",
            "description": "Filter by Protocol Number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Query paramater to be used to sort result set by column",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name",
                "phase",
                "status",
                "sponsor",
                "protocolNumber",
                "sponsorStudyNumber",
                "operationalStudyNumber"
              ]
            }
          },
          {
            "name": "filter[name]",
            "in": "query",
            "description": "Filter by study name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search[shortName]",
            "in": "query",
            "description": "Search by study short name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[studyIds]",
            "in": "query",
            "description": "Filter by Study Ids",
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}(?:([,][0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}))*$",
              "type": "string"
            }
          },
          {
            "name": "search[name]",
            "in": "query",
            "description": "Search by study name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[partial]",
            "in": "query",
            "description": "Partial search is across following columns which are visible to the user - number - name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[isActive]",
            "in": "query",
            "description": "Filter by active/inactive",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Query parameter to be used for directional sort of column",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "search[sponsor]",
            "in": "query",
            "description": "Search by study sponsor",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search[protocolNumber]",
            "in": "query",
            "description": "Search by study protocol number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[sponsorStudyNumber]",
            "in": "query",
            "description": "Filter By Sponsor Study Number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page number, first page is 1",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries per page",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "filter[operationalStudyNumber]",
            "in": "query",
            "description": "Filter By Operational Study Number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/study-list"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "post": {
        "description": "Adds a study to a tenant",
        "operationId": "Add Study",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Query paramater to be used to sort result set by column",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name",
                "phase",
                "status",
                "sponsor",
                "protocolNumber",
                "sponsorStudyNumber",
                "operationalStudyNumber"
              ]
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Query parameter to be used for directional sort of column",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page number, first page is 1",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries per page",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add-study"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_1"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/Validate": {
      "get": {
        "description": "Checks uniqueness of study name or number. Study Name and Study Number are required to be unique within a Tenant. Will only validate one at a time, based on the incoming query parameter",
        "operationId": "Validate Study Name/Number",
        "parameters": [
          {
            "name": "operationalStudyNumber",
            "in": "query",
            "description": "A project-code type designation as used by the conductor of the research (e.g. S37, a CRO, etc.) to be used for integration purposes (project management, resourcing, etc.) with the operator of the research.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Query parameter to validate that the name is unique",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sponsorStudyNumber",
            "in": "query",
            "description": "A project-code type designation as used by the sponsor of the research to be used for integration purposes (project management, resourcing, etc.) with the sponsor of research.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protocolNumber",
            "in": "query",
            "description": "The code of record for the study protocol as filed with prevailing authority.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shortName",
            "in": "query",
            "description": "Study short name identifying the Study.",
            "schema": {
              "maxLength": 14,
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "query",
            "description": "Filter by study UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-examples": {
                    "available": {
                      "name": "Greatest Study Ever",
                      "isAvailable": true
                    },
                    "unavailable": {
                      "name": "Greatest Study Ever",
                      "isAvailable": false
                    }
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}": {
      "get": {
        "description": "Return data for the study uuid",
        "operationId": "Retrieve Study",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/study"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "put": {
        "description": "Update study information",
        "operationId": "Update study",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update-study-by-id"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_2"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/user-invites": {
      "get": {
        "description": "Retrieves the user Invite for the associated with a site",
        "operationId": "Retrieve user Invite_0",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "Expired",
                "Accepted",
                "Pending",
                "Failed",
                "Invited",
                "Active"
              ]
            }
          },
          {
            "name": "search[email]",
            "in": "query",
            "description": "Fuzzy search on email field. This search is performed on email field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page number, first page is 1",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries per page",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "filter[roleUuids]",
            "in": "query",
            "description": "Filter by Role Id",
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}(?:([,][0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}){0,110})$",
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user-invites"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/user-invites/{inviteId}": {
      "get": {
        "description": "Return data for the user-invite uuid",
        "operationId": "Retrieve user-invite_0",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "inviteId",
            "in": "path",
            "description": "Unique ID associated with a user-invite",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-examples": {
                    "active-user-invites": {
                      "invite": {
                        "id": "da0c3b1a-4567-44f5-ae88-d8c4505ea5ae",
                        "email": "isac22@example.com",
                        "preferredLanguageId": "e80d79b5-bb07-46b2-9842-3b8135ff4adc",
                        "preferredLanguage": "English",
                        "systemIdentifier": "Platform",
                        "integrationParticipantId": "",
                        "status": "Active",
                        "invitedAt": "02-JAN-2021",
                        "invitedBy": "John",
                        "updatedAt": "02-JAN-2021",
                        "updatedBy": "John"
                      },
                      "profile": {
                        "userId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                        "oktaUserId": "00u15dxq5f7XARlvL0h8",
                        "userName": "s37UserName",
                        "firstName": "Jen",
                        "middleName": "Doe",
                        "lastName": "Test",
                        "mobileNumber": "+1 12345 67890",
                        "primaryEmailId": "isac22@example.com",
                        "secondaryEmailId": "isac22@example.com",
                        "systemIdentifier": "Platform",
                        "integrationParticipantId": "",
                        "timeZonePreference": "EST",
                        "countryCode": "US",
                        "state": "CA",
                        "suffix": "Sr",
                        "dateOfBirth": "OCT-1992",
                        "streetAddress1": "123 Main St.",
                        "streetAddress2": "Apt 5F",
                        "city": "Beverly Hills",
                        "zipCode": "90210",
                        "status": "ACTIVE",
                        "activatedAt": "02-JAN-2021",
                        "credentials": {
                          "securityQuestion": "What is the name of your favorite pet?"
                        }
                      },
                      "roles": [
                        {
                          "roleName": "SiteAdmin",
                          "siteName": "HRS",
                          "siteNo": "HRS - ATLN - 222444",
                          "siteId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                          "studyNo": "HRS - 222444",
                          "studyId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                          "tenantId": "Loki",
                          "tenantUuid": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae"
                        },
                        {
                          "roleName": "StudyAdmin",
                          "siteName": "",
                          "siteNo": "",
                          "siteId": "",
                          "studyNo": "HRS - 222445",
                          "studyId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                          "tenantId": "Loki",
                          "tenantUuid": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae"
                        }
                      ]
                    },
                    "inactive-user-invites": {
                      "invite": {
                        "id": "da0c3b1a-4567-44f5-ae88-d8c4505ea5ae",
                        "email": "isac22@example.com",
                        "preferredLanguageId": "e80d79b5-bb07-46b2-9842-3b8135ff4adc",
                        "preferredLanguage": "English",
                        "systemIdentifier": "Platform",
                        "integrationParticipantId": "",
                        "status": "Invited",
                        "invitedAt": "02-JAN-2021",
                        "invitedBy": "John",
                        "updatedAt": "02-JAN-2021",
                        "updatedBy": "John"
                      },
                      "roles": [
                        {
                          "roleName": "Participant",
                          "siteName": "HRS",
                          "siteNo": "HRS - ATLN - 222444",
                          "siteId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                          "studyNo": "HRS - 222444",
                          "studyId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                          "tenantId": "Loki",
                          "tenantUuid": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "patch": {
        "description": "This endpoint is used to revoke the roles that the user has been previously invited to. If it is the last role being revoked, then status will be changed to Expired.",
        "operationId": "Revoke User Invite Roles_0",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "inviteId",
            "in": "path",
            "description": "Unique ID associated with a user-invite",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchUserInvite"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_3"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/user-invites/{inviteId}/resend-invite": {
      "patch": {
        "description": "Resend a User Invite from a study context, new token and new expiration date will be set. Sub value from headers is used for CreatedBy and UpdateBy values. Proc layer is where the actual implementation is done. Study Proc layer is only pass through for this endpoint.",
        "operationId": "Resend User Invite_0",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "inviteId",
            "in": "path",
            "description": "Unique ID associated with a user-invite",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resendUserInvite"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_4"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/users/{userId}": {
      "put": {
        "description": "Grant or Revoke roles for existing user",
        "operationId": "Grant or Revoke roles for existing user_0",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUser"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_5"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/visit-plan/$apply": {
      "post": {
        "description": "applying a visit plan to sites",
        "operationId": "apply VisitPlan",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/type_6"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "message": "Visit Plan applied to successfully",
                    "correlationId": "service-proxy|dev2|acme|2020-06-15T17:19:58.651Z|85770a63-c3b4-45bb-be89-8995306c29d4",
                    "timestamp": 1620772642
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/sites": {
      "get": {
        "description": "Retrieves all Sites",
        "operationId": "Retrieve Sites",
        "parameters": [
          {
            "name": "filter[siteIds]",
            "in": "query",
            "description": "Filter by siteId",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[number]",
            "in": "query",
            "description": "Filter by site number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[isTest]",
            "in": "query",
            "description": "Filter by isTest",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[isActive]",
            "in": "query",
            "description": "Filter by active/inactive",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[visitPlanIds]",
            "in": "query",
            "description": "Filter by visitPlanId",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search[siteNo]",
            "in": "query",
            "description": "Search by site number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[hasLinkedVisitPlan]",
            "in": "query",
            "description": "Returns sites with linked visit plans",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page number, first page is 1",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "search[siteName]",
            "in": "query",
            "description": "Search by site name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries per page",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fetch-sites"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "post": {
        "description": "Creates Site for trial",
        "operationId": "Create Site",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add-site"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_7"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/sites/Validate": {
      "get": {
        "description": "Validates site using site number",
        "operationId": "Validates site",
        "parameters": [
          {
            "name": "siteId",
            "in": "query",
            "description": "Site UUID to except on validate operation",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-examples": {
                    "available": {
                      "number": "HRS - SID - 222444",
                      "isAvailable": true
                    },
                    "unavailable": {
                      "number": "HRS - SID - 222444",
                      "isAvailable": false
                    }
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/sites/{siteId}": {
      "get": {
        "description": "Fetches specific site using siteId",
        "operationId": "Fetch site by site ID",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fetch-site-by-id"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "put": {
        "description": "Update Site record",
        "operationId": "Update Site",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update-site"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_8"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/sites/{siteId}/user-invites": {
      "get": {
        "description": "Retrieves the user Invite for the associated with a site",
        "operationId": "Retrieve user Invite_1",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "Expired",
                "Accepted",
                "Pending",
                "Failed",
                "Invited",
                "Active"
              ]
            }
          },
          {
            "name": "search[email]",
            "in": "query",
            "description": "Fuzzy search on email field. This search is performed on email field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page number, first page is 1",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries per page",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "filter[roleUuids]",
            "in": "query",
            "description": "Filter by Role Id",
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}(?:([,][0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}){0,110})$",
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user-invites"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/sites/{siteId}/user-invites/{inviteId}": {
      "get": {
        "description": "Return data for the user-invite uuid",
        "operationId": "Retrieve user-invite_1",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "inviteId",
            "in": "path",
            "description": "Unique ID associated with a user-invite",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "userName": "jmdoe",
                    "status": "Active",
                    "firstName": "John",
                    "middleName": "M",
                    "lastName": "Doe",
                    "mobileNumber": "+1 555-555-5555",
                    "primaryEmailId": "primaryEmail@science37.com",
                    "secondaryEmailId": "secondEmail@science37.com",
                    "timeZone": "EST",
                    "languagePreference": "2a578dff-6659-4888-86c6-271d0ab7969e",
                    "inviteEmail": "inviteEmail@science37.com",
                    "inviteDate": "02-Jan-2021"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "patch": {
        "description": "This endpoint is used to revoke the roles that the user has been previously invited to. If it is the last role being revoked, then status will be changed to Expired.",
        "operationId": "Revoke User Invite Roles_1",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "inviteId",
            "in": "path",
            "description": "Unique ID associated with a user-invite",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchUserInvite"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_9"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/sites/{siteId}/user-invites/{inviteId}/resend-invite": {
      "patch": {
        "description": "Resend a User Invite, new token and new expiration date will be set. Sub value from headers is used for CreatedBy and UpdateBy values. Proc layer is where the actual implementation is done. Study Proc layer is only pass through for this endpoint.",
        "operationId": "Resend User Invite_1",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "inviteId",
            "in": "path",
            "description": "Unique ID associated with a user-invite",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resendUserInvite"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_10"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/sites/{siteId}/user-invites/Validate": {
      "post": {
        "description": "Validate email of a LAR",
        "operationId": "Validate LAR email",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email Id to be validated",
            "required": true,
            "schema": {
              "pattern": "^([a-zA-Z0-9_\\-\\.+]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validateLARemail"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateLARemailResponse"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/sites/{siteId}/languages": {
      "get": {
        "description": "Retrieves the languages associated with a site",
        "operationId": "Retrieve Site Languages",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Query paramater to be used to sort result set by column",
            "schema": {
              "type": "string",
              "default": "languageName",
              "enum": [
                "languageName",
                "formLanguageCode",
                "uiLanguageCode",
                "ethicsApprovedDate",
                "status"
              ]
            }
          },
          {
            "name": "globalize",
            "in": "query",
            "description": "Returns languageName field as their own respective language (e.g. \"English (United States)\", \"español (Estados Unidos)\", \"français canadien\")",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Query parameter to be used for directional sort of column",
            "schema": {
              "type": "string",
              "default": "ASC",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page number, first page is 1",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries per page",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/site-languages"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "post": {
        "description": "Adds a language to a site",
        "operationId": "Add Site Language",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add-site-language"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_11"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/sites/{siteId}/languages/{siteLanguageId}": {
      "put": {
        "description": "Update site related values for a language",
        "operationId": "Update Site Language",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteLanguageId",
            "in": "path",
            "description": "Unique ID associated with a site language",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update-site-language"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/sites/{siteId}/users/{userId}": {
      "put": {
        "description": "Grant or Revoke roles for existing user",
        "operationId": "Grant or Revoke roles for existing user_1",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "Unique ID associated with a site",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUser"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_12"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/arms": {
      "get": {
        "description": "Retrieves all Arms",
        "operationId": "Retrieve Arms",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search by Arm Name or Type Code",
            "schema": {
              "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page number, first page is 1",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries per page",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-arms"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "post": {
        "description": "Adds an arm to the study specified in URL",
        "operationId": "Add ARM",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post-arm"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_13"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/arms/Validate": {
      "get": {
        "description": "Checks uniqueness of arm name. Arm Name is required to be unique within a Study.",
        "operationId": "Validate Arm Name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Checks to see if name already exists",
            "required": true,
            "schema": {
              "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-examples": {
                    "available": {
                      "name": "Greatest Study Ever",
                      "isAvailable": true
                    },
                    "unavailable": {
                      "name": "Greatest Study Ever",
                      "isAvailable": false
                    }
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/arms/{armId}": {
      "get": {
        "description": "Return data for the armId uuid",
        "operationId": "Retrieve ARM data",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "armId",
            "in": "path",
            "description": "Unique ID associated with an Arm",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-arm-by-id"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "put": {
        "description": "Edits an arm to the study specified in URL",
        "operationId": "Edit ARM",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "armId",
            "in": "path",
            "description": "Unique ID associated with an Arm",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/put-arm"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_14"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/cohorts": {
      "get": {
        "description": "Retrieves all Cohorts",
        "operationId": "Retrieve Cohorts",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search by Cohort Name or Group Number",
            "schema": {
              "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Starting page number, first page is 1",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of entries per page",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-cohorts"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "post": {
        "description": "Adds a Cohort to the study specified in URL",
        "operationId": "Add Cohort",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/post-cohort"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_15"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/cohorts/Validate": {
      "get": {
        "description": "Checks uniqueness of cohort name or group number. Cohort Name and Cohort Group Number are required to be unique within a Study. Will only validate one at a time, based on the incoming query parameter.",
        "operationId": "Validate Cohort Name/Group Number",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Checks to see if Name already exists",
            "schema": {
              "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
              "type": "string"
            }
          },
          {
            "name": "groupNumber",
            "in": "query",
            "description": "Checks to see if Group Number already exists",
            "schema": {
              "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-amf-examples": {
                    "nameAvailable": {
                      "name": "Greatest Study Ever",
                      "isAvailable": true
                    },
                    "nameUnavailable": {
                      "name": "Greatest Study Ever",
                      "isAvailable": false
                    },
                    "groupNumberAvailable": {
                      "groupNumber": "12345F",
                      "isAvailable": true
                    },
                    "groupNumberUnavailable": {
                      "groupNumber": "12345F",
                      "isAvailable": false
                    }
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      }
    },
    "/platform/tenants/{tenantId}/studies/{studyId}/cohorts/{cohortId}": {
      "get": {
        "description": "Return data for the cohortId uuid",
        "operationId": "Retrieve Cohort data",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "cohortId",
            "in": "path",
            "description": "Unique ID associated with a Cohort",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-cohort-by-id"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        }
      },
      "put": {
        "description": "Edits a Cohort to the study specified in URL",
        "operationId": "Edit Cohort",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Unique ID associated with a tenant",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "studyId",
            "in": "path",
            "description": "Unique ID associated with a study",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "cohortId",
            "in": "path",
            "description": "Unique ID associated with a Cohort",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
              "type": "string"
            }
          },
          {
            "name": "client_id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_secret",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/put-cohort"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "The request has succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type_16"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "401": {
            "description": "The supplied credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "403": {
            "description": "There is a problem with the credentials that were provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "403",
                    "message": "Access is forbidden"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "404",
                    "message": "Resource not found"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "405": {
            "description": "A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "405",
                    "message": "Method not allowed"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "406": {
            "description": "The target resource does not have a current representation that would be acceptable to the user agent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "406",
                    "message": "Not acceptable"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "415": {
            "description": "The accept header specified an unsupported media type.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "415",
                    "message": "Unsupported media type"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "422",
                    "message": "Unprocessable Entity"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "429",
                    "message": "Too Many Requests"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "500": {
            "description": "An internal processing error occurred while processing the API request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "500",
                    "message": "Internal Server Error"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "502": {
            "description": "The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "504": {
            "description": "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in attempting to complete the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "597": {
            "description": "Experience API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "597",
                    "message": "Experience API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "598": {
            "description": "Process API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "598",
                    "message": "Process API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          },
          "599": {
            "description": "System API timeout during dependent service invocation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "599",
                    "message": "System API Dependent Service Timeout"
                  }
                }
              }
            },
            "x-amf-mediaType": "application/json"
          }
        },
        "x-codegen-request-body-name": "generated"
      }
    }
  },
  "components": {
    "schemas": {
      "type": {
        "required": [
          "env",
          "git_branch",
          "git_commitSha",
          "git_dirty",
          "healthy",
          "pom_version",
          "uptime"
        ],
        "type": "object",
        "properties": {
          "healthy": {
            "type": "boolean"
          },
          "uptime": {
            "type": "string"
          },
          "pom_version": {
            "type": "string"
          },
          "env": {
            "type": "string"
          },
          "git_dirty": {
            "type": "boolean"
          },
          "git_branch": {
            "type": "string"
          },
          "git_commitSha": {
            "type": "string"
          }
        },
        "example": {
          "healthy": true,
          "uptime": "tbd",
          "pom_version": "1.0.3",
          "env": "dev2",
          "git_dirty": true,
          "git_branch": "NXL-2428-sha1-version-endpoint",
          "git_commitSha": "3238d123811afe962b524836687e6a01759aee7a"
        }
      },
      "study-list": {
        "required": [
          "data",
          "limit",
          "start",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/type_17"
            }
          },
          "limit": {
            "type": "integer"
          },
          "start": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        },
        "example": {
          "data": [
            {
              "name": "Hydration Research Study",
              "sponsor": "Sponsor Name",
              "phase": "II",
              "status": "Build",
              "shortName": "HRS Project",
              "descriptiveTitle": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
              "protocolNumber": "A1234567",
              "sponsorStudyNumber": "JJJ-8009",
              "operationalStudyNumber": "JJJ-8009",
              "availablePatientStatusCodes": [
                {
                  "10": "INT"
                },
                {
                  "20": "QUAL"
                },
                {
                  "80": "RAND"
                }
              ],
              "id": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf"
            },
            {
              "name": "Hydration Research Study",
              "sponsor": "Sponsor Name",
              "phase": "II",
              "status": "Build",
              "shortName": "HRS Project",
              "descriptiveTitle": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
              "protocolNumber": "A1234567",
              "sponsorStudyNumber": "JJJ-8009",
              "operationalStudyNumber": "JJJ-8009",
              "availablePatientStatusCodes": [
                {
                  "10": "INT"
                },
                {
                  "20": "QUAL"
                },
                {
                  "80": "RAND"
                }
              ],
              "id": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf"
            }
          ],
          "start": 1,
          "limit": 200,
          "total": 25
        }
      },
      "add-study": {
        "required": [
          "descriptiveTitle",
          "name",
          "phase",
          "protocolNumber",
          "sponsor",
          "status"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 300,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Study name identifying the Study. Unique within the Tenant.",
            "example": "Hydration Research Study"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Study UUID used in reference tables. Only present in created studies.",
            "example": "a7fb9f8b-55a9-46b8-a665-af146bf89059"
          },
          "sponsor": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Sponsor for this Study.",
            "example": "Pfizer"
          },
          "phase": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Phase the study is currently in.",
            "example": "IV",
            "enum": [
              "I",
              "Ia",
              "Ib",
              "Ia/b",
              "II",
              "IIa",
              "IIb",
              "IIa/b",
              "III",
              "IV"
            ]
          },
          "status": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Status of the Study",
            "example": "Build",
            "enum": [
              "Build",
              "Active",
              "Paused",
              "Locked"
            ]
          },
          "shortName": {
            "maxLength": 14,
            "type": "string",
            "description": "Study short name identifying the Study.",
            "example": "HRS Project"
          },
          "descriptiveTitle": {
            "maxLength": 1000,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Description of the study",
            "example": "The goal of this study is to assess the short term safety and tolerability of water in subjects with a history of mild to severe thirstiness to assess skin tone and mood"
          },
          "protocolNumber": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "The code of record for the study protocol as filed with prevailing authority.",
            "example": "A1234567"
          },
          "sponsorStudyNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "A project-code type designation as used by the sponsor of the research to be used for integration purposes (project management, resourcing, etc.) with the sponsor of research.",
            "example": "JJJ-8009"
          },
          "operationalStudyNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "A project-code type designation as used by the conductor of the research (e.g. S37, a CRO, etc.) to be used for integration purposes (project management, resourcing, etc.) with the operator of the research.",
            "example": "JJJ-8009"
          }
        },
        "example": {
          "name": "Hydration Research Study",
          "sponsor": "Sponsor Name",
          "phase": "II",
          "status": "Build",
          "shortName": "HRS Project",
          "descriptiveTitle": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
          "protocolNumber": "A1234567",
          "sponsorStudyNumber": "JJJ-8009",
          "operationalStudyNumber": "JJJ-8009"
        }
      },
      "type_1": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "study": {
        "required": [
          "descriptiveTitle",
          "id",
          "name",
          "phase",
          "protocolNumber",
          "sponsor",
          "status"
        ],
        "type": "object",
        "properties": {
          "sponsor": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Sponsor for this Study.",
            "example": "Pfizer"
          },
          "sponsorStudyNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "A project-code type designation as used by the sponsor of the research to be used for integration purposes (project management, resourcing, etc.) with the sponsor of research.",
            "example": "JJJ-8009"
          },
          "name": {
            "maxLength": 300,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Study name identifying the Study. Unique within the Tenant.",
            "example": "Hydration Research Study"
          },
          "availablePatientStatusCodes": {
            "type": "array",
            "description": "Trial statuses stored as a list of objects (an array of \"orderId - status code\" pairs)",
            "example": "",
            "items": {
              "type": "object"
            }
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Study UUID used in reference tables. Only present in created studies.",
            "example": "a7fb9f8b-55a9-46b8-a665-af146bf89059"
          },
          "descriptiveTitle": {
            "maxLength": 1000,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Description of the study",
            "example": "The goal of this study is to assess the short term safety and tolerability of water in subjects with a history of mild to severe thirstiness to assess skin tone and mood"
          },
          "operationalStudyNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "A project-code type designation as used by the conductor of the research (e.g. S37, a CRO, etc.) to be used for integration purposes (project management, resourcing, etc.) with the operator of the research.",
            "example": "JJJ-8009"
          },
          "phase": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Phase the study is currently in.",
            "example": "IV",
            "enum": [
              "I",
              "Ia",
              "Ib",
              "Ia/b",
              "II",
              "IIa",
              "IIb",
              "IIa/b",
              "III",
              "IV"
            ]
          },
          "protocolNumber": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "The code of record for the study protocol as filed with prevailing authority.",
            "example": "A1234567"
          },
          "shortName": {
            "maxLength": 14,
            "type": "string",
            "description": "Study short name identifying the Study.",
            "example": "HRS Project"
          },
          "status": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Status of the Study",
            "example": "Build",
            "enum": [
              "Build",
              "Active",
              "Paused",
              "Locked"
            ]
          }
        },
        "example": {
          "name": "Hydration Research Study",
          "sponsor": "Sponsor Name",
          "phase": "II",
          "status": "Build",
          "shortName": "HRS Project",
          "descriptiveTitle": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
          "protocolNumber": "A1234567",
          "sponsorStudyNumber": "JJJ-8009",
          "operationalStudyNumber": "JJJ-8009",
          "availablePatientStatusCodes": [
            {
              "10": "INT"
            },
            {
              "20": "QUAL"
            },
            {
              "80": "RAND"
            }
          ],
          "id": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf"
        }
      },
      "update-study-by-id": {
        "required": [
          "descriptiveTitle",
          "name",
          "phase",
          "protocolNumber",
          "sponsor",
          "status"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 300,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Study name identifying the Study. Unique within the Tenant.",
            "example": "Hydration Research Study"
          },
          "sponsor": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Sponsor for this Study.",
            "example": "Pfizer"
          },
          "phase": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Phase the study is currently in.",
            "example": "IV",
            "enum": [
              "I",
              "Ia",
              "Ib",
              "Ia/b",
              "II",
              "IIa",
              "IIb",
              "IIa/b",
              "III",
              "IV"
            ]
          },
          "status": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Status of the Study",
            "example": "Active",
            "enum": [
              "Build",
              "Active",
              "Paused",
              "Locked"
            ]
          },
          "shortName": {
            "maxLength": 14,
            "type": "string",
            "description": "Study short name identifying the Study.",
            "example": "HRS Project"
          },
          "descriptiveTitle": {
            "maxLength": 1000,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Description of the study",
            "example": "Descriptive sample text"
          },
          "protocolNumber": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "The code of record for the study protocol as filed with prevailing authority.",
            "example": "A1234567"
          },
          "sponsorStudyNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "A project-code type designation as used by the sponsor of the research to be used for integration purposes (project management, resourcing, etc.) with the sponsor of research.",
            "example": "JJJ-8009"
          },
          "operationalStudyNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "A project-code type designation as used by the conductor of the research (e.g. S37, a CRO, etc.) to be used for integration purposes (project management, resourcing, etc.) with the operator of the research.",
            "example": "JJJ-8009"
          }
        },
        "example": {
          "name": "Hydration Research Study",
          "sponsor": "Sponsor Name",
          "phase": "II",
          "status": "Build",
          "shortName": "HRS Project",
          "descriptiveTitle": "Sample text",
          "protocolNumber": "A1234567",
          "sponsorStudyNumber": "JJJ-8009",
          "operationalStudyNumber": "JJJ-8009"
        }
      },
      "type_2": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "user-invites": {
        "required": [
          "data",
          "limit",
          "start",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "inviteEmail",
                "invitedDate",
                "roles",
                "status",
                "userId"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                  "type": "string",
                  "description": "Unique ID associated with a user invite",
                  "example": "781EbfF0-040d-d27a-5dAE-DbB0aAEa3bf9"
                },
                "userId": {
                  "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                  "type": "string",
                  "description": "Unique ID associated with a user",
                  "example": "781EbfF0-040d-d27a-5dAE-DbB0aAEa3bf9"
                },
                "inviteEmail": {
                  "pattern": "^([a-zA-Z0-9_\\-\\.+]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
                  "type": "string",
                  "description": "Email address of invitee",
                  "example": "john.doe@science37.com"
                },
                "status": {
                  "type": "string",
                  "description": "Status of User Invite",
                  "enum": [
                    "Expired",
                    "Accepted",
                    "Pending",
                    "Failed",
                    "Invited",
                    "Active"
                  ]
                },
                "systemIdentifier": {
                  "type": "string",
                  "description": "This is to identify the system. set for current users as Platform (default)",
                  "enum": [
                    "Platform",
                    "s37SFDC"
                  ]
                },
                "integrationParticipantId": {
                  "type": "string",
                  "description": "The Salesfore Integration ID"
                },
                "invitedDate": {
                  "type": "string",
                  "description": "Time at which resource is created",
                  "example": "02-JAN-2021"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "required": [
                      "roleName",
                      "siteId",
                      "studyId",
                      "tenantUuid"
                    ],
                    "type": "object",
                    "properties": {
                      "roleName": {
                        "type": "string",
                        "description": "Name of role",
                        "example": "Nurse"
                      },
                      "tenantUuid": {
                        "type": "object",
                        "description": "Tenant UUID",
                        "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                        "x-amf-union": [
                          {
                            "type": "string",
                            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                          },
                          {
                            "description": "Allows for Blank String",
                            "type": "string",
                            "pattern": "^$"
                          }
                        ]
                      },
                      "studyId": {
                        "type": "object",
                        "description": "Study UUID",
                        "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                        "x-amf-union": [
                          {
                            "type": "string",
                            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                          },
                          {
                            "description": "Allows for Blank String",
                            "type": "string",
                            "pattern": "^$"
                          }
                        ]
                      },
                      "siteId": {
                        "type": "object",
                        "description": "Site UUID",
                        "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                        "x-amf-union": [
                          {
                            "type": "string",
                            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                          },
                          {
                            "description": "Allows for Blank String",
                            "type": "string",
                            "pattern": "^$"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of entries per page",
            "example": 10
          },
          "start": {
            "type": "integer",
            "description": "Starting page number, first page is 1",
            "example": 1
          },
          "total": {
            "type": "integer",
            "description": "Total number of users in the result",
            "example": 405
          }
        },
        "example": {
          "data": [
            {
              "id": "e4094048-83a6-4255-84cc-d0d8641544f1",
              "userId": "a4094048-83a6-4255-84cc-d0d8641544f1",
              "systemIdentifier": "Platform",
              "integrationParticipantId": "",
              "inviteEmail": "john.doe@science37.com",
              "status": "Pending",
              "invitedDate": "02-JAN-2021",
              "roles": [
                {
                  "roleName": "SiteAdmin",
                  "siteId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                  "studyId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                  "tenantUuid": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae"
                }
              ]
            },
            {
              "id": "f4094048-83a6-4255-84cc-d0d8641544f1",
              "userId": "a4094048-83a6-4255-84cc-d0d86415434f",
              "systemIdentifier": "Platform",
              "integrationParticipantId": "",
              "inviteEmail": "jane.doe@science37.com",
              "status": "Pending",
              "invitedDate": "02-JAN-2021",
              "roles": [
                {
                  "roleName": "SiteAdmin",
                  "siteId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                  "studyId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                  "tenantUuid": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae"
                }
              ]
            }
          ],
          "limit": 2,
          "start": 7,
          "total": 100
        }
      },
      "patchUserInvite": {
        "required": [
          "roles"
        ],
        "type": "object",
        "properties": {
          "roles": {
            "required": [
              "revoke"
            ],
            "type": "object",
            "properties": {
              "revoke": {
                "type": "array",
                "description": "Roles to be revoke for user invite. This will delete the related role and corresponding permissions for the user invite",
                "items": {
                  "required": [
                    "roleName",
                    "siteId",
                    "studyId",
                    "tenantUuid"
                  ],
                  "type": "object",
                  "properties": {
                    "roleName": {
                      "type": "string",
                      "description": "Name of role",
                      "example": "Nurse"
                    },
                    "tenantUuid": {
                      "type": "object",
                      "description": "Tenant UUID",
                      "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                      "x-amf-union": [
                        {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "description": "Allows for Blank String",
                          "type": "string",
                          "pattern": "^$"
                        }
                      ]
                    },
                    "studyId": {
                      "type": "object",
                      "description": "Study UUID",
                      "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                      "x-amf-union": [
                        {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "description": "Allows for Blank String",
                          "type": "string",
                          "pattern": "^$"
                        }
                      ]
                    },
                    "siteId": {
                      "type": "object",
                      "description": "Site UUID",
                      "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                      "x-amf-union": [
                        {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "description": "Allows for Blank String",
                          "type": "string",
                          "pattern": "^$"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Roles to grant or revoke for user."
          }
        },
        "example": {
          "roles": {
            "revoke": [
              {
                "roleName": "Study Admin",
                "tenantUuid": "36e3bb84-d02f-4065-9c2f-42f80d0f20f6",
                "studyId": "c2a23f87-fabd-49e3-b418-f156b678d431",
                "siteId": ""
              }
            ]
          }
        }
      },
      "type_3": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "resendUserInvite": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "pattern": "^([a-zA-Z0-9_\\-\\.+]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
            "type": "string",
            "description": "Email address of user to invite. If a new email is sent, then old email will be overwritten with new email.",
            "example": "john.doe@science37.com"
          }
        },
        "example": {
          "email": "john.doe@science37.com"
        }
      },
      "type_4": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "updateUser": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "object",
            "properties": {
              "userName": {
                "pattern": "^[^@\\s]{5,37}$",
                "type": "string",
                "description": "User's username.",
                "x-amf-examples": {
                  "latinExample": "science37User",
                  "nonLatinExample": "日本最大級のポ"
                }
              },
              "firstName": {
                "type": "string",
                "description": "User's first name.",
                "example": "John"
              },
              "middleName": {
                "type": "string",
                "description": "User's middle name or initial.",
                "example": "M"
              },
              "lastName": {
                "type": "string",
                "description": "User's last name.",
                "example": "Doe"
              },
              "mobileNumber": {
                "type": "object",
                "description": "User's mobile phone number.",
                "example": "+1 555-555-5555",
                "x-amf-union": [
                  {
                    "type": "string",
                    "pattern": "^(\\+(\\d{1,}[\\s-]?){1,})$"
                  },
                  {
                    "description": "Allows for Blank String",
                    "type": "string",
                    "pattern": "^$"
                  }
                ]
              },
              "systemIdentifier": {
                "type": "string",
                "description": "This is to identify the system. set for current users as Platform (default)",
                "enum": [
                  "Platform",
                  "s37SFDC"
                ]
              },
              "integrationParticipantId": {
                "type": "string",
                "description": "The Salesfore Integration ID"
              },
              "primaryEmailId": {
                "pattern": "^([a-zA-Z0-9_\\-\\.+]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$",
                "type": "string",
                "description": "User's primary email.",
                "example": "primaryEmail@science37.com"
              },
              "secondaryEmailId": {
                "type": "object",
                "description": "User's secondary email.",
                "x-amf-union": [
                  {
                    "type": "string",
                    "pattern": "^([a-zA-Z0-9_\\-\\.+]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$"
                  },
                  {
                    "description": "Allows for Blank String",
                    "type": "string",
                    "pattern": "^$"
                  }
                ],
                "x-amf-examples": {
                  "emailExample": "secondaryEmail@science37.com",
                  "emptyStringExample": ""
                }
              },
              "timeZonePreference": {
                "type": "string",
                "description": "User's preferred time zone.",
                "example": "EST"
              },
              "languagePreference": {
                "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                "type": "string",
                "description": "User's preferred language.",
                "example": "2a578dff-6659-4888-86c6-271d0ab7969e"
              },
              "countryCode": {
                "type": "object",
                "description": "User's country.",
                "example": "US",
                "x-amf-union": [
                  {
                    "type": "string",
                    "pattern": "^[A-Z]{2}$"
                  },
                  {
                    "description": "Allows for Blank String",
                    "type": "string",
                    "pattern": "^$"
                  }
                ]
              },
              "state": {
                "type": "object",
                "description": "User's state/province.",
                "example": "CA",
                "x-amf-union": [
                  {
                    "description": "ISO 3166-2 Subdivision code",
                    "type": "string",
                    "pattern": "^[A-Z0-9]{1,3}$"
                  },
                  {
                    "description": "Allows for Blank String",
                    "type": "string",
                    "pattern": "^$"
                  }
                ]
              },
              "suffix": {
                "type": "string",
                "description": "User's suffix.",
                "example": "Sr"
              },
              "dateOfBirth": {
                "type": "object",
                "description": "User's date of birth.",
                "x-amf-union": [
                  {
                    "type": "string",
                    "pattern": "^(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)-[\\d]{4}$"
                  },
                  {
                    "description": "Allows for Blank String",
                    "type": "string",
                    "pattern": "^$"
                  }
                ],
                "x-amf-examples": {
                  "dobExample": "OCT-1992",
                  "emptyStringExample": ""
                }
              },
              "streetAddress1": {
                "type": "string",
                "description": "User's address.",
                "example": "123 Main St."
              },
              "streetAddress2": {
                "type": "string",
                "description": "User's addressed continued.",
                "example": "Apt 5F"
              },
              "city": {
                "type": "string",
                "description": "User's city.",
                "example": "Beverly Hills"
              },
              "zipCode": {
                "type": "string",
                "description": "User's zip code.",
                "example": "90210"
              },
              "credentials": {
                "type": "object",
                "properties": {
                  "password": {
                    "minLength": 8,
                    "pattern": "^(?:(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*)$",
                    "type": "string",
                    "example": "S37Password123!"
                  },
                  "securityQuestion": {
                    "type": "string",
                    "description": "User's security question",
                    "example": "What is the name of your favorite pet?"
                  },
                  "securityQuestionAnswer": {
                    "type": "string",
                    "description": "User's answer to security question",
                    "example": "Fido"
                  }
                },
                "description": "Credential details associated with the user."
              }
            },
            "description": "Object containing properties related to a user stored in Okta."
          },
          "roles": {
            "type": "object",
            "properties": {
              "grant": {
                "type": "array",
                "description": "Roles to grant to user",
                "items": {
                  "required": [
                    "roleName",
                    "siteId",
                    "studyId",
                    "tenantUuid"
                  ],
                  "type": "object",
                  "properties": {
                    "roleName": {
                      "type": "string",
                      "description": "Name of role",
                      "example": "Nurse"
                    },
                    "tenantUuid": {
                      "type": "object",
                      "description": "Tenant UUID",
                      "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                      "x-amf-union": [
                        {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "description": "Allows for Blank String",
                          "type": "string",
                          "pattern": "^$"
                        }
                      ]
                    },
                    "studyId": {
                      "type": "object",
                      "description": "Study UUID",
                      "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                      "x-amf-union": [
                        {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "description": "Allows for Blank String",
                          "type": "string",
                          "pattern": "^$"
                        }
                      ]
                    },
                    "siteId": {
                      "type": "object",
                      "description": "Site UUID",
                      "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                      "x-amf-union": [
                        {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "description": "Allows for Blank String",
                          "type": "string",
                          "pattern": "^$"
                        }
                      ]
                    }
                  }
                }
              },
              "revoke": {
                "type": "array",
                "description": "Roles to revoke from user",
                "items": {
                  "required": [
                    "roleName",
                    "siteId",
                    "studyId",
                    "tenantUuid"
                  ],
                  "type": "object",
                  "properties": {
                    "roleName": {
                      "type": "string",
                      "description": "Name of role",
                      "example": "Nurse"
                    },
                    "tenantUuid": {
                      "type": "object",
                      "description": "Tenant UUID",
                      "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                      "x-amf-union": [
                        {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "description": "Allows for Blank String",
                          "type": "string",
                          "pattern": "^$"
                        }
                      ]
                    },
                    "studyId": {
                      "type": "object",
                      "description": "Study UUID",
                      "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                      "x-amf-union": [
                        {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "description": "Allows for Blank String",
                          "type": "string",
                          "pattern": "^$"
                        }
                      ]
                    },
                    "siteId": {
                      "type": "object",
                      "description": "Site UUID",
                      "example": "2a578dff-6659-4888-86c6-271d0ab7969e",
                      "x-amf-union": [
                        {
                          "type": "string",
                          "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "description": "Allows for Blank String",
                          "type": "string",
                          "pattern": "^$"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Roles to grant or revoke for user."
          }
        },
        "example": {
          "profile": {
            "firstName": "John",
            "middleName": "M",
            "lastName": "Doe",
            "mobileNumber": "+1 555-555-5555",
            "systemIdentifier": "s37SFDC",
            "integrationParticipantId": "a1b2c3",
            "primaryEmailId": "primaryEmail@science37.com",
            "secondaryEmailId": "secondEmail@science37.com",
            "timeZonePreference": "EST",
            "languagePreference": "2a578dff-6659-4888-86c6-271d0ab7969e",
            "countryCode": "US",
            "state": "CA",
            "suffix": "Sr",
            "dateOfBirth": "OCT-1992",
            "streetAddress1": "123 Main St.",
            "streetAddress2": "Apt 5F",
            "city": "Beverly Hills",
            "zipCode": "90210",
            "credentials": {
              "securityQuestion": "What is the name of your favorite pet?"
            }
          },
          "roles": {
            "grant": [
              {
                "roleName": "Nurse",
                "tenantUuid": "2a578dff-6659-4888-86c6-271d0ab7969e",
                "studyId": "ea0c3b1a-4567-44f5-ae88-d8c4505ea7ae",
                "siteId": "3a578dff-6659-4888-86c6-271d0ab7969e"
              }
            ],
            "revoke": [
              {
                "roleName": "Study Admin",
                "tenantUuid": "36e3bb84-d02f-4065-9c2f-42f80d0f20f6",
                "studyId": "c2a23f87-fabd-49e3-b418-f156b678d431",
                "siteId": ""
              }
            ]
          }
        }
      },
      "type_5": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "type_6": {
        "required": [
          "visitPlanId"
        ],
        "type": "object",
        "properties": {
          "visitPlanId": {
            "type": "string",
            "description": "the visit plan which would be applied to the site",
            "example": "382ceeb3-5663-4151-9ef4-66773f6fc20e"
          },
          "visitPlanVersion": {
            "type": "string",
            "description": "the visit plan version which would be applied to the site",
            "example": "1.0"
          },
          "isTrial": {
            "type": "boolean",
            "description": "a flag that indicates either visit plan on trial level or not",
            "example": false
          },
          "sites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/items"
            }
          }
        },
        "example": {
          "visitPlanId": "382ceeb3-5663-4151-9ef4-66773f6fc20e",
          "visitPlanVersion": "1.0",
          "isTrial": false,
          "sites": [
            {
              "siteId": "382ceeb3-5663-4151-9ef4-66773f6fc20g"
            },
            {
              "siteId": "382ceeb3-5663-4151-9ef4-66773f6fc20f"
            }
          ]
        }
      },
      "fetch-sites": {
        "required": [
          "data",
          "limit",
          "start",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/items_18"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of entries per page",
            "example": 10
          },
          "start": {
            "type": "integer",
            "description": "Starting page number, first page is 1",
            "example": 1
          },
          "total": {
            "type": "integer",
            "description": "Total number of users in the result",
            "example": 405
          }
        },
        "example": {
          "data": [
            {
              "id": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf",
              "name": "Playa Vista",
              "number": "HRS - SID - 222444",
              "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
              "studyNumber": "TR - 000 - XYZ",
              "status": " ",
              "isActive": true,
              "stateProvince": "CA",
              "country": "United States",
              "countryCode": "US",
              "region": "Europe",
              "regionCode": "EU",
              "isTest": false,
              "isMetasite": true,
              "visitPlanId": "382ceeb3-5663-4151-9ef4-66773f6fc20e",
              "createdAt": "2019-10-07T21:03:12.110Z",
              "createdBy": "user.builder@science37.com",
              "updatedAt": "2019-11-07T21:03:12.110Z",
              "updatedBy": "user.builder@science37.com"
            },
            {
              "id": "6330c2e4-eb39-450f-be29-b6b2ac64f1de",
              "name": "Playa Vista",
              "number": "HRS - SID - 222555",
              "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
              "studyNumber": "TR - 001 - XYZ",
              "status": " ",
              "isActive": true,
              "stateProvince": "CA",
              "country": "United States",
              "countryCode": "US",
              "region": "Europe",
              "regionCode": "EU",
              "isTest": false,
              "isMetasite": false,
              "visitPlanId": "382ceeb3-5663-4151-9ef4-66773f6fc20e",
              "createdAt": "2019-10-07T21:03:12.110Z",
              "createdBy": "user.builder@science37.com",
              "updatedAt": "2019-11-07T21:03:12.110Z",
              "updatedBy": "user.builder@science37.com"
            }
          ],
          "limit": 2,
          "start": 7,
          "total": 358
        }
      },
      "add-site": {
        "required": [
          "country",
          "description",
          "isMetasite",
          "name",
          "number",
          "regionCode"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Site name",
            "example": "Playa Vista"
          },
          "number": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Site number that is unique per tenant",
            "example": "HRS - SID - 222444"
          },
          "country": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "US only at this time",
            "example": "US"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "Site description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          },
          "state": {
            "type": "object",
            "description": "States/provinces based on country",
            "example": "CA",
            "x-amf-union": [
              {
                "description": "ISO 3166-2 Subdivision code",
                "type": "string",
                "pattern": "^[A-Z0-9]{1,3}$"
              },
              {
                "description": "Allows for Blank String",
                "type": "string",
                "pattern": "^$"
              }
            ]
          },
          "regionCode": {
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "Region code for region",
            "example": "EU"
          },
          "isMetasite": {
            "type": "boolean",
            "description": "true(Yes) or false (No). Determines address requirement."
          },
          "isTestsite": {
            "type": "boolean",
            "description": "A flag to indicate if site is a test site. This can only be set once during a site creation and is ignored during an update."
          },
          "address": {
            "type": "object",
            "description": "isMetasite=false, city, street, postal code are required",
            "x-amf-union": [
              {
                "type": null
              },
              {
                "type": "object",
                "properties": {
                  "street": {
                    "maxLength": 100,
                    "type": "string",
                    "example": "123 Culver St.",
                    "required": true
                  },
                  "city": {
                    "maxLength": 100,
                    "type": "string",
                    "example": "Los Angeles",
                    "required": true
                  },
                  "postalCode": {
                    "maxLength": 12,
                    "type": "string",
                    "example": "90210",
                    "required": true
                  }
                }
              }
            ]
          }
        },
        "example": {
          "name": "Playa Vista",
          "number": "HRS - SID - 222444",
          "country": "US",
          "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
          "state": "CA",
          "regionCode": "EU",
          "isMetasite": false,
          "isTestsite": true,
          "address": {
            "street": "123 Culver St.",
            "city": "Los Angeles",
            "postalCode": "90210"
          }
        }
      },
      "type_7": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "fetch-site-by-id": {
        "required": [
          "country",
          "countryCode",
          "createdAt",
          "createdBy",
          "description",
          "id",
          "isActive",
          "isMetasite",
          "isTest",
          "name",
          "number",
          "region",
          "regionCode",
          "stateProvince",
          "updatedAt",
          "updatedBy"
        ],
        "type": "object",
        "properties": {
          "visitPlanId": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Visit plan which is assigned to the site",
            "example": "382ceeb3-5663-4151-9ef4-66773f6fc20e"
          },
          "countryCode": {
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "US only at this time",
            "example": "US"
          },
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Site name",
            "example": "Playa Vista"
          },
          "createdBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Created by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "address": {
            "required": [
              "city",
              "postalCode",
              "street"
            ],
            "type": "object",
            "properties": {
              "city": {
                "maxLength": 100,
                "type": "string",
                "example": "Los Angeles"
              },
              "street": {
                "maxLength": 100,
                "type": "string",
                "example": "123 Culver St."
              },
              "postalCode": {
                "maxLength": 12,
                "type": "string",
                "example": "90210"
              }
            },
            "description": "isMetasite=false, city, street, postal code are required"
          },
          "region": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Region name for region",
            "example": "Europe"
          },
          "stateProvince": {
            "pattern": "^[A-Z0-9]{1,3}$",
            "type": "string",
            "description": "States/provinces based on country",
            "example": "CA"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Site UUID",
            "example": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf"
          },
          "createdAt": {
            "type": "string",
            "description": "Created time, only used in GET calls",
            "format": "date-time",
            "example": "2019-10-07T21:03:12.110Z"
          },
          "regionCode": {
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "Region code for region",
            "example": "EU"
          },
          "number": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Site number that is unique per tenant",
            "example": "HRS - SID - 222444"
          },
          "country": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "United States only at this time",
            "example": "United States"
          },
          "isMetasite": {
            "type": "boolean",
            "description": "true(Yes) or false (No). Determines address requirement."
          },
          "updatedBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Updated by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "updatedAt": {
            "type": "string",
            "description": "Updated time, only used in GET calls",
            "format": "date-time",
            "example": "2019-11-07T21:03:12.110Z"
          },
          "isActive": {
            "type": "boolean",
            "description": "A flag to indicate if site is active or not"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "Site description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          },
          "isTest": {
            "type": "boolean",
            "description": "A flag to indicate if site is a test site. This can only be set once during a site creation and is ignored during an update."
          }
        },
        "example": {
          "id": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf",
          "name": "Playa Vista",
          "number": "HRS - SID - 222444",
          "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
          "isTest": false,
          "isActive": true,
          "createdAt": "2019-10-07T21:03:12.110Z",
          "createdBy": "user.builder@science37.com",
          "updatedAt": "2019-11-07T21:03:12.110Z",
          "updatedBy": "user.builder@science37.com",
          "visitPlanId": "382ceeb3-5663-4151-9ef4-66773f6fc20e",
          "isMetasite": false,
          "stateProvince": "CA",
          "country": "United States",
          "countryCode": "US",
          "region": "Europe",
          "regionCode": "EU",
          "address": {
            "city": "Los Angeles",
            "street": "123 Culver St.",
            "postalCode": "90210"
          }
        }
      },
      "update-site": {
        "required": [
          "country",
          "description",
          "isMetasite",
          "name",
          "number"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Site name",
            "example": "Playa Vista"
          },
          "number": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Site number that is unique per tenant",
            "example": "HRS - SID - 222444"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "Site description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          },
          "country": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "US only at this time",
            "example": "US"
          },
          "state": {
            "pattern": "^[A-Z0-9]{1,3}$",
            "type": "string",
            "description": "States/provinces based on country",
            "example": "CA"
          },
          "isMetasite": {
            "type": "boolean",
            "description": "true(Yes) or false (No). Determines address requirement."
          },
          "address": {
            "type": "object",
            "description": "isMetasite=false, city, street, postal code are required",
            "x-amf-union": [
              {
                "type": null
              },
              {
                "type": "object",
                "properties": {
                  "street": {
                    "maxLength": 100,
                    "type": "string",
                    "example": "123 Culver St.",
                    "required": true
                  },
                  "city": {
                    "maxLength": 100,
                    "type": "string",
                    "example": "Los Angeles",
                    "required": true
                  },
                  "postalCode": {
                    "maxLength": 12,
                    "type": "string",
                    "example": "90210",
                    "required": true
                  }
                }
              }
            ]
          }
        },
        "example": {
          "name": "Playa Vista",
          "number": "HRS - SID - 222444",
          "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
          "country": "US",
          "state": "CA",
          "isMetasite": false,
          "address": {
            "street": "123 Culver St.",
            "city": "Los Angeles",
            "postalCode": "90210"
          }
        }
      },
      "type_8": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "type_9": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "type_10": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "validateLARemail": {
        "required": [
          "roleUuid"
        ],
        "type": "object",
        "properties": {
          "roleUuid": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "LAR roleUuid",
            "example": "c51a20fe-204e-4504-a3de-bccf0cf062bd"
          }
        },
        "example": {
          "roleUuid": "c51a20fe-204e-4504-a3de-bccf0cf062bd"
        }
      },
      "validateLARemailResponse": {
        "required": [
          "invalidRoleStack",
          "userExists"
        ],
        "type": "object",
        "properties": {
          "userExists": {
            "type": "boolean",
            "description": "Respresents user exists in OKTA or not",
            "example": false
          },
          "invalidRoleStack": {
            "type": "boolean",
            "description": "Respresents user invites exists in tenant or not",
            "example": false
          }
        },
        "example": {
          "userExists": false,
          "invalidRoleStack": false
        }
      },
      "site-languages": {
        "required": [
          "data",
          "limit",
          "start",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "required": [
                "ethicsApprovedDate",
                "formLanguageCode",
                "isEthicsApproved",
                "languageId",
                "languageName",
                "languageVersionId",
                "siteLanguageId",
                "status",
                "uiLanguageCode"
              ],
              "type": "object",
              "properties": {
                "siteLanguageId": {
                  "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                  "type": "string",
                  "description": "Site Language UUID used in reference table",
                  "example": "b319b494-93aa-464a-8d50-7f043313fd50"
                },
                "languageId": {
                  "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                  "type": "string",
                  "description": "Language UUID used in reference tables",
                  "example": "e80d79b5-bb07-46b2-9842-3b8135ff4adc"
                },
                "languageVersionId": {
                  "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
                  "type": "string",
                  "description": "Language Version UUID used in reference tables",
                  "example": "a7fb9f8b-55a9-46b8-a665-af146bf89059"
                },
                "languageName": {
                  "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
                  "type": "string",
                  "description": "User friendly identifier for the language",
                  "example": "English"
                },
                "formLanguageCode": {
                  "pattern": "^[a-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
                  "type": "string",
                  "description": "Language code used by forms",
                  "example": "en"
                },
                "uiLanguageCode": {
                  "pattern": "^[a-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$",
                  "type": "string",
                  "description": "Language code used by forms",
                  "example": "en-us"
                },
                "isEthicsApproved": {
                  "type": "boolean",
                  "description": "Field denoting etchics approval status",
                  "example": true
                },
                "ethicsApprovedDate": {
                  "type": "object",
                  "description": "Date approved by ethics committee. Must fall on current or prior date. If null, `status` should be set to inactive.",
                  "example": "2021-12-01T00:00:00.000Z",
                  "x-amf-union": [
                    {
                      "type": "string"
                    },
                    {
                      "type": null
                    }
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Status of the site language in the system",
                  "example": "Active",
                  "enum": [
                    "Active",
                    "Inactive"
                  ]
                }
              }
            }
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of entries per page",
            "example": 2
          },
          "start": {
            "type": "integer",
            "description": "Starting page number, first page is 1",
            "example": 1
          },
          "total": {
            "type": "integer",
            "description": "Total number of entries in the result",
            "example": 6
          }
        },
        "example": {
          "data": [
            {
              "siteLanguageId": "b319b494-93aa-464a-8d50-7f043313fd50",
              "languageId": "e80d79b5-bb07-46b2-9842-3b8135ff4adc",
              "languageVersionId": "a7fb9f8b-55a9-46b8-a665-af146bf89059",
              "languageName": "English",
              "formLanguageCode": "en",
              "uiLanguageCode": "en",
              "isEthicsApproved": true,
              "ethicsApprovedDate": "2021-11-01T00:00:00.000Z",
              "status": "Active"
            },
            {
              "siteLanguageId": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf",
              "languageId": "0941f38e-076e-4897-af39-98e0c0c1f9ea",
              "languageVersionId": "087b0acb-8d91-4aef-9620-feb4edae4fc8",
              "languageName": "Tigrigna (Tigray)",
              "formLanguageCode": "ti",
              "uiLanguageCode": "ti",
              "isEthicsApproved": false,
              "status": "Inactive"
            }
          ],
          "limit": 2,
          "start": 1,
          "total": 6
        }
      },
      "add-site-language": {
        "required": [
          "languageId",
          "status"
        ],
        "type": "object",
        "properties": {
          "languageId": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Language UUID used in reference tables",
            "example": "e80d79b5-bb07-46b2-9842-3b8135ff4adc"
          },
          "ethicsApprovedDate": {
            "type": "object",
            "description": "Date approved by ethics committee. Must fall on current or prior date. If null, `status` should be set to inactive.",
            "example": "2021-12-01T00:00:00.000Z",
            "x-amf-union": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": null
              },
              {
                "type": "string",
                "pattern": "^$"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of the site language in the system",
            "example": "Active",
            "enum": [
              "Active",
              "Inactive"
            ]
          }
        },
        "example": {
          "languageId": "e80d79b5-bb07-46b2-9842-3b8135ff4adc",
          "ethicsApprovedDate": "2021-12-01T00:00:00.000Z",
          "status": "Active"
        }
      },
      "type_11": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "update-site-language": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "ethicsApprovedDate": {
            "type": "object",
            "description": "Date approved by ethics committee. Must fall on current or prior date. If null, `status` should be set to inactive.",
            "example": "2021-12-01T00:00:00.000Z",
            "x-amf-union": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": null
              },
              {
                "type": "string",
                "pattern": "^$"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of the site language in the system",
            "example": "Active",
            "enum": [
              "Active",
              "Inactive"
            ]
          }
        },
        "example": {
          "ethicsApprovedDate": "2021-12-01T00:00:00.000Z",
          "status": "Active"
        }
      },
      "type_12": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "get-arms": {
        "required": [
          "data",
          "limit",
          "start",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/items_19"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of entries per page",
            "example": 10
          },
          "start": {
            "type": "integer",
            "description": "Starting page number, first page is 1",
            "example": 1
          },
          "total": {
            "type": "integer",
            "description": "Total number of users in the result",
            "example": 405
          }
        },
        "example": {
          "data": [
            {
              "uuid": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf",
              "name": "Arm1",
              "typeCode": "12345F",
              "description": "A great description here",
              "targetAccrual": 25,
              "randWeight": 50,
              "createdAt": "2019-10-07T21:03:12.110Z",
              "createdBy": "username",
              "updatedAt": "2019-11-07T21:03:12.110Z",
              "updatedBy": "username"
            },
            {
              "uuid": "6330c2e4-eb39-450f-be29-b6b2ac64f1ce",
              "name": "Arm2",
              "typeCode": "12345E",
              "description": "A great description here2",
              "targetAccrual": 20,
              "randWeight": 40,
              "createdAt": "2019-10-07T21:03:12.110Z",
              "createdBy": "username",
              "updatedAt": "2019-11-07T21:03:12.110Z",
              "updatedBy": "username"
            }
          ],
          "limit": 2,
          "start": 7,
          "total": 358
        }
      },
      "post-arm": {
        "required": [
          "name",
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Arm name",
            "example": "First 1000"
          },
          "typeCode": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Type Code for the ARM",
            "example": "123FGH"
          },
          "randWeight": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "ARM randomization weight",
            "example": 50
          },
          "description": {
            "maxLength": 999,
            "type": "string",
            "description": "Arm description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          },
          "targetAccrual": {
            "minimum": 1,
            "type": "integer",
            "description": "Target number of participants for this ARM",
            "example": 100
          }
        },
        "example": {
          "name": "Arm1",
          "typeCode": "12345F",
          "description": "A great description here",
          "targetAccrual": 25,
          "randWeight": 50
        }
      },
      "type_13": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "get-arm-by-id": {
        "required": [
          "name",
          "typeCode",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Arm name",
            "example": "First 1000"
          },
          "createdBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Created by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "createdAt": {
            "type": "string",
            "description": "Created time, only used in GET calls",
            "format": "date-time",
            "example": "2019-10-07T21:03:12.110Z"
          },
          "uuid": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Arm UUID",
            "example": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf"
          },
          "updatedAt": {
            "type": "string",
            "description": "Updated time, only used in GET calls",
            "format": "date-time",
            "example": "2019-11-07T21:03:12.110Z"
          },
          "updatedBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Updated by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "typeCode": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Type Code for the ARM",
            "example": "123FGH"
          },
          "description": {
            "maxLength": 999,
            "type": "string",
            "description": "Arm description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          },
          "randWeight": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "ARM randomization weight",
            "example": 50
          },
          "targetAccrual": {
            "minimum": 1,
            "type": "integer",
            "description": "Target number of participants for this ARM",
            "example": 100
          }
        },
        "example": {
          "uuid": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf",
          "name": "Arm1",
          "typeCode": "12345F",
          "description": "A great description here",
          "targetAccrual": 25,
          "randWeight": 50,
          "createdAt": "2019-10-07T21:03:12.110Z",
          "createdBy": "username",
          "updatedAt": "2019-11-07T21:03:12.110Z",
          "updatedBy": "username"
        }
      },
      "put-arm": {
        "required": [
          "name",
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Arm name",
            "example": "First 1000"
          },
          "typeCode": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Type Code for the ARM",
            "example": "123FGH"
          },
          "randWeight": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "ARM randomization weight",
            "example": 50
          },
          "description": {
            "maxLength": 999,
            "type": "string",
            "description": "Arm description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          },
          "targetAccrual": {
            "minimum": 1,
            "type": "integer",
            "description": "Target number of participants for this ARM",
            "example": 100
          }
        },
        "example": {
          "name": "Arm1",
          "typeCode": "12345F",
          "description": "A great description here",
          "targetAccrual": 25,
          "randWeight": 50
        }
      },
      "type_14": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "get-cohorts": {
        "required": [
          "data",
          "limit",
          "start",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/items_20"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of entries per page",
            "example": 10
          },
          "start": {
            "type": "integer",
            "description": "Starting page number, first page is 1",
            "example": 1
          },
          "total": {
            "type": "integer",
            "description": "Total number of users in the result",
            "example": 405
          }
        },
        "example": {
          "data": [
            {
              "uuid": "6330c2e4-eb39-450f-be29-b6b2ac64f1ce",
              "name": "Cohort1",
              "description": "A great description here",
              "groupNumber": "12345E",
              "createdAt": "2019-10-07T21:03:12.110Z",
              "createdBy": "user.builder@science37.com",
              "updatedAt": "2019-11-07T21:03:12.110Z",
              "updatedBy": "user.builder@science37.com"
            },
            {
              "uuid": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf",
              "name": "Cohort2",
              "description": "A great description here",
              "groupNumber": "12345F",
              "createdAt": "2019-10-07T21:03:12.110Z",
              "createdBy": "user.builder@science37.com",
              "updatedAt": "2019-11-07T21:03:12.110Z",
              "updatedBy": "user.builder@science37.com"
            }
          ],
          "limit": 2,
          "start": 7,
          "total": 358
        }
      },
      "post-cohort": {
        "required": [
          "description",
          "groupNumber",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Cohort name",
            "example": "Cohort1"
          },
          "groupNumber": {
            "maxLength": 250,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Group number for the cohort",
            "example": "123FGH"
          },
          "description": {
            "maxLength": 999,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Cohort description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          }
        },
        "example": {
          "name": "Cohort1",
          "description": "A great description here",
          "groupNumber": "12345F"
        }
      },
      "type_15": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "get-cohort-by-id": {
        "required": [
          "description",
          "groupNumber",
          "name",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Cohort name",
            "example": "Cohort1"
          },
          "createdBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Created by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "createdAt": {
            "type": "string",
            "description": "Created time, only used in GET calls",
            "format": "date-time",
            "example": "2019-10-07T21:03:12.110Z"
          },
          "uuid": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Cohort UUID",
            "example": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf"
          },
          "updatedAt": {
            "type": "string",
            "description": "Updated time, only used in GET calls",
            "format": "date-time",
            "example": "2019-11-07T21:03:12.110Z"
          },
          "updatedBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Updated by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "groupNumber": {
            "maxLength": 250,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Group number for the cohort",
            "example": "123FGH"
          },
          "description": {
            "maxLength": 999,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Cohort description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          }
        },
        "example": {
          "uuid": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf",
          "name": "Cohort1",
          "description": "A great description here",
          "groupNumber": "12345F",
          "createdAt": "2019-10-07T21:03:12.110Z",
          "createdBy": "username",
          "updatedAt": "2019-11-07T21:03:12.110Z",
          "updatedBy": "username"
        }
      },
      "put-cohort": {
        "required": [
          "description",
          "groupNumber",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Cohort name",
            "example": "Cohort1"
          },
          "groupNumber": {
            "maxLength": 250,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Group number for the cohort",
            "example": "123FGH"
          },
          "description": {
            "maxLength": 999,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Cohort description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          }
        },
        "example": {
          "name": "Cohort1",
          "description": "A great description here",
          "groupNumber": "12345F"
        }
      },
      "type_16": {
        "required": [
          "correlationId",
          "id",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Correlation ID"
          },
          "timestamp": {
            "type": "integer",
            "description": "Response unix timestamp"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "UUID of the entity"
          }
        },
        "example": {
          "correlationId": "0be21e6b-89aa-4a14-99b3-aefb0f97e38b",
          "timestamp": 1581119702090,
          "id": "4168a390-4a05-11ea-b0d5-19bc34469161"
        }
      },
      "type_17": {
        "required": [
          "descriptiveTitle",
          "id",
          "name",
          "phase",
          "protocolNumber",
          "sponsor",
          "status"
        ],
        "type": "object",
        "properties": {
          "sponsor": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Sponsor for this Study.",
            "example": "Pfizer"
          },
          "sponsorStudyNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "A project-code type designation as used by the sponsor of the research to be used for integration purposes (project management, resourcing, etc.) with the sponsor of research.",
            "example": "JJJ-8009"
          },
          "name": {
            "maxLength": 300,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Study name identifying the Study. Unique within the Tenant.",
            "example": "Hydration Research Study"
          },
          "availablePatientStatusCodes": {
            "type": "array",
            "description": "Trial statuses stored as a list of objects (an array of \"orderId - status code\" pairs)",
            "example": "",
            "items": {
              "type": "object"
            }
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Study UUID used in reference tables. Only present in created studies.",
            "example": "a7fb9f8b-55a9-46b8-a665-af146bf89059"
          },
          "descriptiveTitle": {
            "maxLength": 1000,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Description of the study",
            "example": "The goal of this study is to assess the short term safety and tolerability of water in subjects with a history of mild to severe thirstiness to assess skin tone and mood"
          },
          "operationalStudyNumber": {
            "maxLength": 32,
            "type": "string",
            "description": "A project-code type designation as used by the conductor of the research (e.g. S37, a CRO, etc.) to be used for integration purposes (project management, resourcing, etc.) with the operator of the research.",
            "example": "JJJ-8009"
          },
          "phase": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Phase the study is currently in.",
            "example": "IV",
            "enum": [
              "I",
              "Ia",
              "Ib",
              "Ia/b",
              "II",
              "IIa",
              "IIb",
              "IIa/b",
              "III",
              "IV"
            ]
          },
          "protocolNumber": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "The code of record for the study protocol as filed with prevailing authority.",
            "example": "A1234567"
          },
          "shortName": {
            "maxLength": 14,
            "type": "string",
            "description": "Study short name identifying the Study.",
            "example": "HRS Project"
          },
          "status": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Status of the Study",
            "example": "Build",
            "enum": [
              "Build",
              "Active",
              "Paused",
              "Locked"
            ]
          }
        }
      },
      "items": {
        "required": [
          "siteId"
        ],
        "type": "object",
        "properties": {
          "siteId": {
            "type": "string",
            "description": "id of the site",
            "example": "382ceeb3-5663-4151-9ef4-66773f6fc20e"
          }
        }
      },
      "items_18": {
        "required": [
          "country",
          "countryCode",
          "createdAt",
          "createdBy",
          "description",
          "id",
          "isActive",
          "isMetasite",
          "isTest",
          "name",
          "number",
          "region",
          "regionCode",
          "stateProvince",
          "updatedAt",
          "updatedBy"
        ],
        "type": "object",
        "properties": {
          "visitPlanId": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Visit plan which is assigned to the site",
            "example": "382ceeb3-5663-4151-9ef4-66773f6fc20e"
          },
          "countryCode": {
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "US only at this time",
            "example": "US"
          },
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Site name",
            "example": "Playa Vista"
          },
          "createdBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Created by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "address": {
            "required": [
              "city",
              "postalCode",
              "street"
            ],
            "type": "object",
            "properties": {
              "city": {
                "maxLength": 100,
                "type": "string",
                "example": "Los Angeles"
              },
              "street": {
                "maxLength": 100,
                "type": "string",
                "example": "123 Culver St."
              },
              "postalCode": {
                "maxLength": 12,
                "type": "string",
                "example": "90210"
              }
            },
            "description": "isMetasite=false, city, street, postal code are required"
          },
          "region": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Region name for region",
            "example": "Europe"
          },
          "stateProvince": {
            "pattern": "^[A-Z0-9]{1,3}$",
            "type": "string",
            "description": "States/provinces based on country",
            "example": "CA"
          },
          "id": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Site UUID",
            "example": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf"
          },
          "createdAt": {
            "type": "string",
            "description": "Created time, only used in GET calls",
            "format": "date-time",
            "example": "2019-10-07T21:03:12.110Z"
          },
          "regionCode": {
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "Region code for region",
            "example": "EU"
          },
          "number": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Site number that is unique per tenant",
            "example": "HRS - SID - 222444"
          },
          "country": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "United States only at this time",
            "example": "United States"
          },
          "isMetasite": {
            "type": "boolean",
            "description": "true(Yes) or false (No). Determines address requirement."
          },
          "updatedBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Updated by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "updatedAt": {
            "type": "string",
            "description": "Updated time, only used in GET calls",
            "format": "date-time",
            "example": "2019-11-07T21:03:12.110Z"
          },
          "isActive": {
            "type": "boolean",
            "description": "A flag to indicate if site is active or not"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "Site description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          },
          "isTest": {
            "type": "boolean",
            "description": "A flag to indicate if site is a test site. This can only be set once during a site creation and is ignored during an update."
          }
        }
      },
      "nonMetasiteAddress": {
        "required": [
          "city",
          "postalCode",
          "street"
        ],
        "type": "object",
        "properties": {
          "street": {
            "maxLength": 100,
            "type": "string",
            "example": "123 Culver St."
          },
          "city": {
            "maxLength": 100,
            "type": "string",
            "example": "Los Angeles"
          },
          "postalCode": {
            "maxLength": 12,
            "type": "string",
            "example": "90210"
          }
        }
      },
      "BlankString": {
        "pattern": "^$",
        "type": "string",
        "description": "Allows for Blank String"
      },
      "items_19": {
        "required": [
          "name",
          "typeCode",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "createdBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Created by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Arm name",
            "example": "First 1000"
          },
          "createdAt": {
            "type": "string",
            "description": "Created time, only used in GET calls",
            "format": "date-time",
            "example": "2019-10-07T21:03:12.110Z"
          },
          "updatedBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Updated by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "updatedAt": {
            "type": "string",
            "description": "Updated time, only used in GET calls",
            "format": "date-time",
            "example": "2019-11-07T21:03:12.110Z"
          },
          "uuid": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Arm UUID",
            "example": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf"
          },
          "typeCode": {
            "maxLength": 32,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Type Code for the ARM",
            "example": "123FGH"
          },
          "randWeight": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "ARM randomization weight",
            "example": 50
          },
          "description": {
            "maxLength": 999,
            "type": "string",
            "description": "Arm description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          },
          "targetAccrual": {
            "minimum": 1,
            "type": "integer",
            "description": "Target number of participants for this ARM",
            "example": 100
          }
        }
      },
      "items_20": {
        "required": [
          "description",
          "groupNumber",
          "name",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "createdBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Created by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "name": {
            "maxLength": 100,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Cohort name",
            "example": "Cohort1"
          },
          "createdAt": {
            "type": "string",
            "description": "Created time, only used in GET calls",
            "format": "date-time",
            "example": "2019-10-07T21:03:12.110Z"
          },
          "updatedBy": {
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Updated by, only used in GET calls",
            "example": "user.builder@science37.com"
          },
          "updatedAt": {
            "type": "string",
            "description": "Updated time, only used in GET calls",
            "format": "date-time",
            "example": "2019-11-07T21:03:12.110Z"
          },
          "uuid": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "Cohort UUID",
            "example": "6330c2e4-eb39-450f-be29-b6b2ac64f1cf"
          },
          "groupNumber": {
            "maxLength": 250,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Group number for the cohort",
            "example": "123FGH"
          },
          "description": {
            "maxLength": 999,
            "pattern": "^(\\s|\\S)*\\S(\\s|\\S)*$",
            "type": "string",
            "description": "Cohort description",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          }
        }
      }
    }
  }
}